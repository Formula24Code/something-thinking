XPathFactory与XPath

javax.xml.xpath.XPathFactory //XPathFactory实例可用于创建XPath对象
javax.xml.xpath.XPath //XPath提供对 XPath 评估环境和表达式的访问。

org.apache.ibatis.parsing.XPathParser#commonConstructor调用了XPathFactory.newInstance()

以下是javax.xml.xpath.XPathFactory的部分方法：
    public static XPathFactory newInstance() {

        try {
                //DEFAULT_OBJECT_MODEL_URI = "http://java.sun.com/jaxp/xpath/dom"
                return newInstance(DEFAULT_OBJECT_MODEL_URI);
        } catch (XPathFactoryConfigurationException xpathFactoryConfigurationException) {
                throw new RuntimeException(
                        "XPathFactory#newInstance() failed to create an XPathFactory for the default object model: "
                        + DEFAULT_OBJECT_MODEL_URI
                        + " with the XPathFactoryConfigurationException: "
                        + xpathFactoryConfigurationException.toString()
                );
        }
    }

    public static XPathFactory newInstance(final String uri)
        throws XPathFactoryConfigurationException {

        if (uri == null) {
            throw new NullPointerException(
                    "XPathFactory#newInstance(String uri) cannot be called with uri == null");
        }

        if (uri.length() == 0) {
            throw new IllegalArgumentException(
                    "XPathFactory#newInstance(String uri) cannot be called with uri == \"\"");
        }

        //ss是SecuritySupport对象，与java安全模型有关，获取的ClassLoader为Thread.currentThread().getContextClassLoader()
        ClassLoader classLoader = ss.getContextClassLoader();

        if (classLoader == null) {
            //use the current class loader
            classLoader = XPathFactory.class.getClassLoader();
        }

        XPathFactory xpathFactory = new XPathFactoryFinder(classLoader).newFactory(uri);

        if (xpathFactory == null) {
            throw new XPathFactoryConfigurationException(
                    "No XPathFactory implementation found for the object model: "
                    + uri);
        }

        return xpathFactory;
    }

以下是javax.xml.xpath.XPathFactoryFinder的部分方法：
    public XPathFactoryFinder(ClassLoader loader) {
        this.classLoader = loader;
        if( debug ) {
            debugDisplayClassLoader();
        }
    }

    public XPathFactory newFactory(String uri) throws XPathFactoryConfigurationException {
        if (uri == null) {
            throw new NullPointerException();
        }
        XPathFactory f = _newFactory(uri);
        if (f != null) {
            debugPrintln("factory '" + f.getClass().getName() + "' was found for " + uri);
        } else {
            debugPrintln("unable to find a factory for " + uri);
        }
        return f;
    }

    private XPathFactory _newFactory(String uri) throws XPathFactoryConfigurationException {
        XPathFactory xpathFactory = null;

        // SERVICE_CLASS是XPathFactory.class，
        // SERVICE_CLASS.getName()="javax.xml.xpath.XPathFactory"
        // 当uri为上面传入的DEFAULT_OBJECT_MODEL_URI时，
        // propertyName是"javax.xml.xpath.XPathFactory:http://java.sun.com/jaxp/xpath/dom"
        String propertyName = SERVICE_CLASS.getName() + ":" + uri;

        // system property look up
        try {
            debugPrintln("Looking up system property '"+propertyName+"'" );
            //这里其实调用的是System.getProperty(propertyName)
            //默认情况下这个属性是没有设置的
            String r = ss.getSystemProperty(propertyName);
            if(r!=null) {
                debugPrintln("The value is '"+r+"'");
                xpathFactory = createInstance(r);
                if (xpathFactory != null) {
                    return xpathFactory;
                }
            } else
                debugPrintln("The property is undefined.");
        } catch( Throwable t ) {
            if( debug ) {
                debugPrintln("failed to look up system property '"+propertyName+"'" );
                t.printStackTrace();
            }
        }

        //这里javah得到的是jre根目录，比如D:\Program Files\Zulu\zulu-8\jre
        String javah = ss.getSystemProperty( "java.home" );
        //如果在win平台上configFile就是
        //"D:\Program Files\Zulu\zulu-8\jre\lib\jaxp.properties"
        //找了一下发现默认是没有这个文件的
        String configFile = javah + File.separator +
        "lib" + File.separator + "jaxp.properties";

        // try to read from $java.home/lib/jaxp.properties
        try {
            if(firstTime){
                synchronized(cacheProps){
                    if(firstTime){
                        File f=new File( configFile );
                        firstTime = false;
                        if(ss.doesFileExist(f)){
                            debugPrintln("Read properties file " + f);
                            //cacheProps是Properties对象
                            cacheProps.load(ss.getFileInputStream(f));
                        }
                    }
                }
            }
            final String factoryClassName = cacheProps.getProperty(propertyName);
            debugPrintln("found " + factoryClassName + " in $java.home/jaxp.properties");

            if (factoryClassName != null) {
                xpathFactory = createInstance(factoryClassName);
                if(xpathFactory != null){
                    return xpathFactory;
                }
            }
        } catch (Exception ex) {
            if (debug) {
                ex.printStackTrace();
            }
        }

        // Try with ServiceLoader
        assert xpathFactory == null;
        xpathFactory = findServiceProvider(uri);

        // The following assertion should always be true.
        // Uncomment it, recompile, and run with -ea in case of doubts:
        // assert xpathFactory == null || xpathFactory.isObjectModelSupported(uri);

        if (xpathFactory != null) {
            return xpathFactory;
        }

        // platform default
        if(uri.equals(XPathFactory.DEFAULT_OBJECT_MODEL_URI)) {
            debugPrintln("attempting to use the platform default W3C DOM XPath lib");
            return new XPathFactoryImpl();
        }

        debugPrintln("all things were tried, but none was found. bailing out.");
        return null;
    }

    /**
     * <p>Creates an instance of the specified and returns it.</p>
     *
     * @param className
     *      fully qualified class name to be instantiated.
     *
     * @return null
     *      if it fails. Error messages will be printed by this method.
     */
    XPathFactory createInstance(String className)
            throws XPathFactoryConfigurationException
    {
        XPathFactory xPathFactory = null;

        debugPrintln("createInstance(" + className + ")");

        // get Class from className
        Class<?> clazz = createClass(className);
        if (clazz == null) {
            debugPrintln("failed to getClass(" + className + ")");
            return null;
        }
        debugPrintln("loaded " + className + " from " + which(clazz));

        // instantiate Class as a XPathFactory
        try {
                xPathFactory = (XPathFactory) clazz.newInstance();
        } catch (ClassCastException classCastException) {
                debugPrintln("could not instantiate " + clazz.getName());
                if (debug) {
                        classCastException.printStackTrace();
                }
                return null;
        } catch (IllegalAccessException illegalAccessException) {
                debugPrintln("could not instantiate " + clazz.getName());
                if (debug) {
                        illegalAccessException.printStackTrace();
                }
                return null;
        } catch (InstantiationException instantiationException) {
                debugPrintln("could not instantiate " + clazz.getName());
                if (debug) {
                        instantiationException.printStackTrace();
                }
                return null;
        }

        return xPathFactory;
    }

通过以上代码可以看出，创建XPathFactory对象时有三种情况
1、当我们有指定"javax.xml.xpath.XPathFactory:http://java.sun.com/jaxp/xpath/dom"
这样的系统属性时（这个属性的值必须是完全限定类名），会创建该类的实例并返回
2、如果返回是null或者没有指定这个系统属性，则去尝试将"$java.home/lib/jaxp.properties"文件加载到Properties缓存中，
如果该文件存在并加载成功了，从里面拿出属性"javax.xml.xpath.XPathFactory:http://java.sun.com/jaxp/xpath/dom"的值，
并将该值作为完全限定类名，创建该类的实例并返回
3、如果以上两种情况都不符，则创建XPathFactoryImpl对象并返回


org.apache.ibatis.parsing.XPathParser#commonConstructor里有这样两行代码：
    XPathFactory factory = XPathFactory.newInstance();
    this.xpath = factory.newXPath();
javax.xml.xpath.XPath //XPath提供对 XPath 评估环境和表达式的访问。
假设这里得到的factory的类型是XPathFactoryImpl，XPathFactoryImpl的newXPath()代码：
        public javax.xml.xpath.XPath newXPath() {
            //JdkXmlFeatures _featureManager是XML功能管理器
            //boolean _isNotSecureProcessing = true; //安全处理功能的状态
            //XPathVariableResolver xPathVariableResolver = null; //XPath变量解析器
            //XPathFunctionResolver xPathFunctionResolver = null; //XPath函数解析器
            return new com.sun.org.apache.xpath.internal.jaxp.XPathImpl(
                    xPathVariableResolver, xPathFunctionResolver,
                    !_isNotSecureProcessing, _featureManager );
        }
XPathImpl的构造器：
    XPathImpl( XPathVariableResolver vr, XPathFunctionResolver fr,
            boolean featureSecureProcessing, JdkXmlFeatures featureManager) {
        this.origVariableResolver = this.variableResolver = vr;
        this.origFunctionResolver = this.functionResolver = fr;
        this.featureSecureProcessing = featureSecureProcessing;
        this.featureManager = featureManager;
        this.overrideDefaultParser = featureManager.getFeature(
                JdkXmlFeatures.XmlFeature.JDK_OVERRIDE_PARSER);
    }